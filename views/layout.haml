!!! html
%html{lang: 'en'}
  = ::NewRelic::Agent.browser_timing_header rescue ""
  %head
    %title Celebrate Boston
    %meta{name:"viewport", content:"width=device-width, initial-scale=1"}
    %link{rel: 'stylesheet', type: 'text/css', href: 'assets/css/bootstrap.min.css'}
    %link{rel: 'stylesheet', type: 'text/css', href: 'assets/css/application.css'}
    %script{src: "//cdn.optimizely.com/js/223333749.js" }
    / %link{rel: 'stylesheet', type: 'text/css', href: 'assets/css/bootstrap-responsive.min.css'}
    /[if lt IE 9]
      %script{src: "assets/js/html5shiv.js"}
    :javascript
      // Create a queue, but don't obliterate an existing one!
      var analytics = analytics || [];

      // Define a method that will asynchronously load analytics.js from our CDN.
      analytics.load = function(apiKey) {

        // Create an async script element for analytics.js.
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = ('https:' === document.location.protocol ? 'https://' : 'http://') +
                      'd2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/' + apiKey + '/analytics.min.js';

        // Find the first script element on the page and insert our script next to it.
        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);

        // Define a factory that generates wrapper methods to push arrays of
        // arguments onto our `analytics` queue, where the first element of the arrays
        // is always the name of the analytics.js method itself (eg. `track`).
        var methodFactory = function (type) {
          return function () {
            analytics.push([type].concat(Array.prototype.slice.call(arguments, 0)));
          };
        };

        // Loop through analytics.js' methods and generate a wrapper method for each.
        var methods = ['identify', 'track', 'trackLink', 'trackForm', 'trackClick',
                       'trackSubmit', 'pageview', 'ab', 'alias', 'ready'];
        for (var i = 0; i < methods.length; i++) {
          analytics[methods[i]] = methodFactory(methods[i]);
        }
      };

      // Load analytics.js with your API key, which will automatically load all of the
      // analytics integrations you've turned on for your account. Boosh!
      analytics.load('qy9rkf8bqn');

  %body

    .fb-root
    :javascript
      var _gaq = _gaq || [];
      _gaq.push(
        ['_setAccount', 'UA-40385653-1'],
        ['_setSiteSpeedSampleRate', 100],
        ['_trackPageview']
      );
      window.fbAsyncInit = function() {
        FB.init({ appId: '505162159549114', xfbml: true});
      };

    = yield

    / #footer.navbar-fixed-bottom

    :javascript
      (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/all.js";
        fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    = ::NewRelic::Agent.browser_timing_footer rescue ""
